generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id            Int       @id @default(autoincrement())
  username           String    @unique
  email              String    @unique
  password           String
  phone_number       String?   @unique
  role               USER_ROLE @default(CUSTOMER)
  createdAt          DateTime  @default(now())
  primary_address_id String?
  token              String
  is_disabled        Boolean   @default(false)

  account  account?
  address  address[]
  orders   orders[]
  products product[]
  carts    customer_cart?
}

model account {
  account_id      String  @id
  user_name       String
  profile_picture String?

  user_id Int  @unique
  user    user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model address {
  address_id             String @id
  city_id                String
  user_id                Int
  full_address           String
  label                  String
  recipient_name         String
  recipient_phone_number String

  user   user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  city   city     @relation(fields: [city_id], references: [city_id])
  orders orders[]
}

model city {
  city_id     String @id
  city_name   String
  province_id String
  province    String
  type        String
  postal_code String

  address address[]
}

model orders {
  order_id             String       @id
  order_status         ORDER_STATUS @default(PENDING)
  order_date           DateTime     @default(now())
  order_delivered_date DateTime?
  user_id              Int
  total_price          Int
  shipping_address     String?
  shipping_cost        Int
  delivery_receipt     String?
  payment_proof        String?

  address    address?     @relation(fields: [shipping_address], references: [address_id], onDelete: SetNull)
  user       user         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  order_item order_item[]
}

model order_item {
  order_item_id      String  @id @default(cuid())
  order_quantity     Int
  order_id           String
  product_id         Int
  product_variant_id String?

  orders  orders                @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product product               @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant product_variant_item? @relation(fields: [product_variant_id], references: [variant_item_id], onDelete: Cascade)
}

model product {
  id                  Int            @id @default(autoincrement())
  title               String
  description         String
  price               Int
  images              String[]
  unit                String
  weight              Int
  stock               Int            @default(1)
  expire_date         DateTime
  storage_period      Int            @default(3)
  capable_out_of_town Boolean
  seller_id           Int
  category_id         String?
  tags                String[]
  status              PRODUCT_STATUS @default(PENDING)

  category    product_category?    @relation(fields: [category_id], references: [category_id], onDelete: SetNull)
  seller      user                 @relation(fields: [seller_id], references: [user_id], onDelete: Cascade)
  order_items order_item[]
  variant     product_variant?
  carts       customer_cart_item[]
}

model product_variant {
  variant_id    String @id
  variant_title String

  product_id   Int?                   @unique
  product      product?               @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant_item product_variant_item[]
}

model product_variant_item {
  variant_item_id String @id
  variant_name    String
  variant_stock   Int    @default(0)
  variant_price   Int    @default(0)

  variant_id  String
  variant     product_variant      @relation(fields: [variant_id], references: [variant_id], onDelete: Cascade)
  order_items order_item[]
  carts       customer_cart_item[]
}

model product_category {
  category_id   String @id
  category_name String

  products product[]
}

model customer_cart {
  cart_id      String @id
  user_id      Int    @unique
  total_price  Int
  total_weight Int

  cart_items customer_cart_item[]
  user       user                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model customer_cart_item {
  cart_item_id            String  @id
  cart_id                 String
  product_id              Int
  quantity                Int
  product_variant_item_id String?

  cart    customer_cart         @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  product product               @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant product_variant_item? @relation(fields: [product_variant_item_id], references: [variant_item_id], onDelete: Cascade)
}

enum USER_ROLE {
  ADMIN
  SELLER
  CUSTOMER
}

enum ORDER_STATUS {
  PENDING
  PAID
  PACKED
  SHIPPED
  DELIVERED
  FINISHED
}

enum PRODUCT_STATUS {
  PENDING
  APPROVED
  REJECTED
}
