generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id            Int       @id @default(autoincrement())
  username           String    @unique
  email              String    @unique
  password           String
  phone_number       String?   @unique
  role               USER_ROLE @default(CUSTOMER)
  createdAt          DateTime  @default(now())
  primary_address_id String?
  token              String

  account  account?
  address  address[]
  orders   orders[]
  products product[]
}

model account {
  account_id      String  @id
  user_name       String
  profile_picture String?

  user_id Int  @unique
  user    user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model address {
  address_id             String @id
  user_id                Int
  city                   String
  full_address           String
  label                  String
  recipient_name         String
  recipient_phone_number String

  user user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model orders {
  order_id             String       @id
  order_status         ORDER_STATUS @default(PENDING)
  order_date           DateTime     @default(now())
  order_delivered_date DateTime
  user_id              Int

  user       user         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  order_item order_item[]
}

model order_item {
  order_item_id      String  @id
  order_quantity     Int
  order_id           String
  product_id         Int
  product_variant_id String?

  orders  orders                @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product product               @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant product_variant_item? @relation(fields: [product_variant_id], references: [variant_item_id], onDelete: Cascade)
}

model product {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Int
  images      String[]
  unit        String
  weight      Int
  stock       Int      @default(1)
  seller_id   Int
  category_id String?

  category    product_category? @relation(fields: [category_id], references: [category_id], onDelete: SetNull)
  seller      user              @relation(fields: [seller_id], references: [user_id], onDelete: Cascade)
  order_items order_item[]
  variant     product_variant[]
}

model product_variant {
  variant_id    String @id
  variant_title String

  product_id   Int?
  product      product?               @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant_item product_variant_item[]
}

model product_variant_item {
  variant_item_id String @id
  variant_name    String
  variant_value   String
  variant_price   Int    @default(0)

  variant_id  String
  variant     product_variant @relation(fields: [variant_id], references: [variant_id], onDelete: Cascade)
  order_items order_item[]
}

model product_category {
  category_id   String @id
  category_name String

  products product[]
}

enum USER_ROLE {
  ADMIN
  SELLER
  CUSTOMER
}

enum ORDER_STATUS {
  PENDING
  PAID
  PACKED
  SHIPPED
  DELIVERED
  FINISHED
}
